namespace = specialist_mercatorum

# triggered by on_specialist_subject_conversion_started
# root = agreement
# owner = country, overlord
# target = country, subject
agreement_event = {
	id = specialist_mercatorum.1
	hide_window = yes
	is_triggered_only = yes
	trigger = {
		agreement_preset = preset_mercatorum
		NOT = { has_active_specialization = specialist_mercatorum }
	}
	immediate = {
		set_agreement_flag = convert_to_specialist_mercatorum
		owner = {
			if = {
				limit = { NOT = { is_variable_set = num_specialist_mercatorum } }
				set_variable = {
					which = num_specialist_mercatorum
					value = 0
				}
			}
			change_variable = {
				which = num_specialist_mercatorum
				value = 1
			}
		}
	}
}

# triggered by on_specialist_subject_conversion_started
# root = agreement
# owner = country, overlord
# target = country, subject
agreement_event = {
	id = specialist_mercatorum.2
	hide_window = yes
	is_triggered_only = yes
	trigger = {
		NOT = { agreement_preset = preset_mercatorum }
		has_active_specialization = specialist_mercatorum
	}
	immediate = {
		set_agreement_flag = convert_from_specialist_mercatorum
	}
}

# triggered by on_specialist_subject_conversion_finished and on_specialist_subject_conversion_aborted
# root = agreement
# owner = country, overlord
# target = country, subject
agreement_event = {
	id = specialist_mercatorum.3
	hide_window = yes
	is_triggered_only = yes
	trigger = { has_agreement_flag = convert_to_specialist_mercatorum }
	immediate = {
		remove_agreement_flag = convert_to_specialist_mercatorum
	}
}

# triggered by on_specialist_subject_conversion_finished and on_specialist_subject_conversion_aborted
# root = agreement
# owner = country, overlord
# target = country, subject
agreement_event = {
	id = specialist_mercatorum.4
	hide_window = yes
	is_triggered_only = yes
	trigger = { has_agreement_flag = convert_from_specialist_mercatorum }
	immediate = {
		remove_agreement_flag = convert_from_specialist_mercatorum
		owner = {
			if = {
				limit = { is_variable_set = num_specialist_mercatorum }
				change_variable = {
					which = num_specialist_mercatorum
					value = -1
				}
			}
		}
	}
}

# triggered by on_specialist_subject_conversion_finished
# root = agreement
# owner = country, overlord
# target = country, subject
agreement_event = {
	id = specialist_mercatorum.5
	hide_window = yes
	is_triggered_only = yes
	trigger = { has_agreement_flag = convert_to_specialist_mercatorum }
	immediate = { owner = { refresh_subject_count_loyalty_penalty = yes } }
}

# triggered by on_specialist_subject_conversion_finished
# root = agreement
# owner = country, overlord
# target = country, subject
agreement_event = {
	id = specialist_mercatorum.6
	hide_window = yes
	is_triggered_only = yes
	trigger = { has_agreement_flag = convert_from_specialist_mercatorum }
	immediate = {
		target = { save_event_target_as = former_specialist_mercatorum }
		owner = { refresh_subject_count_loyalty_penalty = yes }
	}
}

# triggered by on_country_destroyed
# root = country, destroyed
# from = country, destroyer (optional)
country_event = {
	id = specialist_mercatorum.7
	hide_window = yes
	is_triggered_only = yes
	trigger = { is_specialist_subject_type = { TYPE = mercatorum } }
	immediate = {
		overlord = {
			if = {
				limit = { is_variable_set = num_specialist_mercatorum }
				change_variable = {
					which = num_specialist_mercatorum
					value = -1
				}
			}
			refresh_subject_count_loyalty_penalty = yes
		}
	}
}

# meratorum specialist subjects must be megacorps - change it back and refund the unity
# triggered by on_post_government_changed
# root = country
country_event = {
	id = specialist_mercatorum.10
	hide_window = yes
	is_triggered_only = yes
	trigger = {
		is_specialist_subject_type = { TYPE = mercatorum }
		is_megacorp = no
	}
	immediate = {
		# from 00_defines.txt: it costs (Empire Size) * X Unity to change Government Type
		# GOVERNMENT_CHANGE_EMPIRE_SIZE_MULT = 10.0
		export_trigger_value_to_variable = {
			trigger = empire_size
			variable = government_change_cost
		}
		multiply_variable = {
			which = government_change_cost
			value = 10
		}
		try_convert_to_mercatorum_megacorp = yes
		add_resource = {
			unity = 1
			mult = government_change_cost
		}
		if = {
			limit = { is_ai = yes }
			clear_variable = government_change_cost
		}
		else = {
			country_event = {
				id = specialist_mercatorum.11
			}
		}
	}
}

# triggered explicitly by specialist_mercatorum.10
country_event = {
	id = specialist_mercatorum.11
	is_triggered_only = yes
	title = specialist_mercatorum.11.title
	desc = specialist_mercatorum.11.desc
	picture = GFX_evt_unity_symbol
	option = {
		name = UNFORTUNATE
	}
	after = {
		clear_variable = government_change_cost
	}
}

# triggered explicitly by specialist_mercatorum.16
situation_event = {
	id = specialist_mercatorum.12
	is_triggered_only = yes
	hide_window = yes
	trigger = {
		is_situation_type = specialist_mercatorum_dividends
		exists = owner
		owner = { is_subject = yes }
	}
	immediate = {
		owner = {
			random_agreement = {
				limit = {
					owner = { is_country = prevprev.overlord }
					target = { is_country = prevprev }
					has_active_specialization = specialist_mercatorum
				}
				save_event_target_as = specialist_mercatorum_agreement
			}
			every_situation = {
				limit = { has_situation_flag = deficit_situation }
				set_variable = {
					which = current_situation_progress
					value = trigger:situation_progress
				}
				if = {
					limit = { NOT = { has_situation_flag = deficit_situation_warn } }
					prev.overlord = {
						country_event = {
							id = specialist_mercatorum.13
							scopes = {
								from = prev
								fromfrom = root
								fromfromfrom = event_target:specialist_mercatorum_agreement
							}
						}
					}
				}
				else_if = {
					limit = {
						NOT = { has_situation_flag = deficit_situation_imminent_default }
						check_variable_arithmetic = {
							which = current_situation_progress
							add = trigger:situation_monthly_progress
							value >= 100
						}
					}
					prev.overlord = {
						country_event = {
							id = specialist_mercatorum.14
							scopes = {
								from = prev
								fromfrom = root
								fromfromfrom = event_target:specialist_mercatorum_agreement
							}
						}
					}
				}
				clear_variable = current_situation_progress
			}
		}
	}
}

# triggered explicitly by specialist_mercatorum.12
# root = country, overlord
# from = situation, deficit
# fromfrom = situation, mercatorum dividends
country_event = {
	id = specialist_mercatorum.13
	title = specialist_mercatorum.13.title
	desc = specialist_mercatorum.13.desc
	picture = GFX_evt_deficit
	show_sound = event_bad_omen
	is_triggered_only = yes
	trigger = {
		exists = from
		from = {
			NOR = {
				has_situation_flag = deficit_situation_warn
				has_situation_flag = deficit_situation_imminent_default
			}
			OR = {
				is_situation_type = situation_energy_deficit
				is_situation_type = situation_mineral_deficit
				is_situation_type = situation_food_deficit
				is_situation_type = situation_consumer_goods_deficit
				is_situation_type = situation_alloys_deficit
				is_situation_type = situation_volatile_motes_deficit
				is_situation_type = situation_exotic_gases_deficit
				is_situation_type = situation_rare_crystals_deficit
			}
		}
		exists = fromfrom
		exists = fromfromfrom
	}
	abort_trigger = {
		OR = {
			NOT = { exists = from }
			from = {
				OR = {
					situation_progress >= 100
					has_situation_flag = deficit_situation_warn
				}
			}
			NOT = { exists = fromfrom }
			NOT = { exists = fromfromfrom }
		}
	}
	immediate = {
		from = {
			switch = {
				trigger = is_situation_type
				situation_energy_deficit = { set_owner_monthly_shortfall = { RESOURCE = energy } }
				situation_mineral_deficit = { set_owner_monthly_shortfall = { RESOURCE = minerals } }
				situation_food_deficit = { set_owner_monthly_shortfall = { RESOURCE = food } }
				situation_consumer_goods_deficit = { set_owner_monthly_shortfall = { RESOURCE = consumer_goods } }
				situation_alloys_deficit = { set_owner_monthly_shortfall = { RESOURCE = alloys } }
				situation_volatile_motes_deficit = { set_owner_monthly_shortfall = { RESOURCE = volatile_motes } }
				situation_exotic_gases_deficit = { set_owner_monthly_shortfall = { RESOURCE = exotic_gases } }
				situation_rare_crystals_deficit = { set_owner_monthly_shortfall = { RESOURCE = rare_crystals } }
				default = {
					log_error = "Unhandled deficit sitation type for situation named [This.GetName] owned by the [This.Owner.GetRealName]"
				}
			}
		}
	}
	option = {
		name = specialist_mercatorum.13.a
		allow = {
			hidden:from = {
				switch = {
					trigger = is_situation_type
					situation_energy_deficit = { can_afford_to_bail_out_mercatorum_subject = { RESOURCE = energy } }
					situation_mineral_deficit = { can_afford_to_bail_out_mercatorum_subject = { RESOURCE = minerals } }
					situation_food_deficit = { can_afford_to_bail_out_mercatorum_subject = { RESOURCE = food } }
					situation_consumer_goods_deficit = { can_afford_to_bail_out_mercatorum_subject = { RESOURCE = consumer_goods } }
					situation_alloys_deficit = { can_afford_to_bail_out_mercatorum_subject = { RESOURCE = alloys } }
					situation_volatile_motes_deficit = { can_afford_to_bail_out_mercatorum_subject = { RESOURCE = volatile_motes } }
					situation_exotic_gases_deficit = { can_afford_to_bail_out_mercatorum_subject = { RESOURCE = exotic_gases } }
					situation_rare_crystals_deficit = { can_afford_to_bail_out_mercatorum_subject = { RESOURCE = rare_crystals } }
					default = { can_afford_to_bail_out_mercatorum_subject = { RESOURCE = energy } }
				}
			}
		}
		from = {
			owner = {
				add_opinion_modifier = {
					who = root
					modifier = opinion_specialist_mercatorum_overlord_deficit_bailout
				}
			}
			switch = {
				trigger = is_situation_type
				situation_energy_deficit = { bail_out_mercatorum_subject = { RESOURCE = energy } }
				situation_mineral_deficit = { bail_out_mercatorum_subject = { RESOURCE = minerals } }
				situation_food_deficit = { bail_out_mercatorum_subject = { RESOURCE = food } }
				situation_consumer_goods_deficit = { bail_out_mercatorum_subject = { RESOURCE = consumer_goods } }
				situation_alloys_deficit = { bail_out_mercatorum_subject = { RESOURCE = alloys } }
				situation_volatile_motes_deficit = { bail_out_mercatorum_subject = { RESOURCE = volatile_motes } }
				situation_exotic_gases_deficit = { bail_out_mercatorum_subject = { RESOURCE = exotic_gases } }
				situation_rare_crystals_deficit = { bail_out_mercatorum_subject = { RESOURCE = rare_crystals } }
			}
		}
		fromfromfrom = { add_loyalty = 5 }
		ai_chance = {
			base = 2
			modifier = {
				add = 1
				has_ethic = ethic_xenophile
			}
			modifier = {
				add = 2
				has_ethic = ethic_fanatic_xenophile
			}
			modifier = {
				add = 2
				OR = {
					is_capitalist = yes
					has_corporate_government = yes
				}
			}
			modifier = {
				add = 2
				has_valid_ai_personality = yes
				has_ai_personality_behaviour = subjugator
			}
			modifier = {
				add = 2
				has_valid_ai_personality = yes
				has_ai_personality_behaviour = multispecies
			}
			modifier = {
				factor = 2
				NOR = { # these built-in personalities don't care about loyalty (loyalty_acceptance < 1)
					has_ai_personality = ruthless_capitalists
					has_ai_personality = slaving_despots
					has_ai_personality = decadent_hierarchy
					has_ai_personality = xenophobic_isolationists
					has_ai_personality = fanatic_purifiers
					has_ai_personality = devouring_swarm
					has_ai_personality = migrating_flock
					has_ai_personality = exterminators
					has_ai_personality = became_the_crisis
					has_ai_personality = imperial_origin_overlord_ai
					has_ai_personality = decadent_capitalists
				}
				from.owner = { is_loyal_to = root }
			}
			modifier = {
				factor = 2
				OR = {
					# these built-in personalities care about loyalty (loyalty_acceptance > 1)
					has_ai_personality = erudite_explorers
					has_ai_personality = democratic_crusaders
					has_ai_personality = harmonious_hierarchy
					has_ai_personality = federation_builders
					has_ai_personality = servitors
					has_ai_personality = fanatic_befrienders
					# these built-in personalities care about economics
					has_ai_personality = peaceful_traders
					# these built-in personalities care about subjects
					has_ai_personality = hegemonic_imperialists
				}
				from.owner = { is_loyal_to = root }
			}
		}
	}
	option = {
		name = specialist_mercatorum.13.b
		from = {
			hidden_effect = { set_situation_flag = deficit_situation_warn }
			owner = {
				add_opinion_modifier = {
					who = root
					modifier = opinion_specialist_mercatorum_overlord_deficit_bailout_refuse
				}
			}
		}
		fromfromfrom = { add_loyalty = -5 }
		ai_chance = {
			base = 1
			modifier = {
				add = 1
				has_ethic = ethic_xenophobe
			}
			modifier = {
				add = 2
				has_ethic = ethic_fanatic_xenophobe
			}
			modifier = {
				add = 2
				has_valid_ai_personality = yes
				has_ai_personality_behaviour = slaver
			}
			modifier = {
				factor = 2
				NOR = { # these built-in personalities care about disloyalty (loyalty_acceptance > 1)
					has_ai_personality = erudite_explorers
					has_ai_personality = democratic_crusaders
					has_ai_personality = harmonious_hierarchy
					has_ai_personality = federation_builders
					has_ai_personality = servitors
					has_ai_personality = fanatic_befrienders
					# these built-in personalities care about economics
					has_ai_personality = peaceful_traders
					# these built-in personalities care about subjects
					has_ai_personality = hegemonic_imperialists
				}
				from.owner = { is_disloyal_to = root }
			}
			modifier = {
				factor = 2
				OR = { # these built-in personalities don't care about disloyalty (loyalty_acceptance < 1)
					has_ai_personality = ruthless_capitalists
					has_ai_personality = slaving_despots
					has_ai_personality = decadent_hierarchy
					has_ai_personality = xenophobic_isolationists
					has_ai_personality = fanatic_purifiers
					has_ai_personality = devouring_swarm
					has_ai_personality = migrating_flock
					has_ai_personality = exterminators
					has_ai_personality = became_the_crisis
					has_ai_personality = imperial_origin_overlord_ai
					has_ai_personality = decadent_capitalists
				}
				from.owner = { is_disloyal_to = root }
			}
		}
	}
}

# triggered explicitly by specialist_mercatorum.12
# root = country, overlord
# from = situation, deficit
# fromfrom = situation, mercatorum dividends
country_event = {
	id = specialist_mercatorum.14
	title = specialist_mercatorum.14.title
	desc = specialist_mercatorum.14.desc
	picture = GFX_evt_deficit
	show_sound = event_life_support_fail
	is_triggered_only = yes
	trigger = {
		exists = from
		from = {
			has_situation_flag = deficit_situation_warn
			NOT = { has_situation_flag = deficit_situation_imminent_default }
			OR = {
				is_situation_type = situation_energy_deficit
				is_situation_type = situation_mineral_deficit
				is_situation_type = situation_food_deficit
				is_situation_type = situation_consumer_goods_deficit
				is_situation_type = situation_alloys_deficit
				is_situation_type = situation_volatile_motes_deficit
				is_situation_type = situation_exotic_gases_deficit
				is_situation_type = situation_rare_crystals_deficit
			}
		}
		exists = fromfrom
		exists = fromfromfrom
	}
	abort_trigger = {
		OR = {
			NOT = { exists = from }
			from = {
				OR = {
					situation_progress >= 100
					has_situation_flag = deficit_situation_imminent_default
				}
			}
			NOT = { exists = fromfrom }
			NOT = { exists = fromfromfrom }
		}
	}
	immediate = {
		from = {
			switch = {
				trigger = is_situation_type
				situation_energy_deficit = { set_owner_monthly_shortfall = { RESOURCE = energy } }
				situation_mineral_deficit = { set_owner_monthly_shortfall = { RESOURCE = minerals } }
				situation_food_deficit = { set_owner_monthly_shortfall = { RESOURCE = food } }
				situation_consumer_goods_deficit = { set_owner_monthly_shortfall = { RESOURCE = consumer_goods } }
				situation_alloys_deficit = { set_owner_monthly_shortfall = { RESOURCE = alloys } }
				situation_volatile_motes_deficit = { set_owner_monthly_shortfall = { RESOURCE = volatile_motes } }
				situation_exotic_gases_deficit = { set_owner_monthly_shortfall = { RESOURCE = exotic_gases } }
				situation_rare_crystals_deficit = { set_owner_monthly_shortfall = { RESOURCE = rare_crystals } }
				default = {
					log_error = "Unhandled deficit sitation type for situation named [This.GetName] owned by the [This.Owner.GetRealName]"
				}
			}
		}
	}
	option = {
		name = specialist_mercatorum.14.a
		allow = {
			hidden:from = {
				switch = {
					trigger = is_situation_type
					situation_energy_deficit = { can_afford_to_bail_out_mercatorum_subject = { RESOURCE = energy } }
					situation_mineral_deficit = { can_afford_to_bail_out_mercatorum_subject = { RESOURCE = minerals } }
					situation_food_deficit = { can_afford_to_bail_out_mercatorum_subject = { RESOURCE = food } }
					situation_consumer_goods_deficit = { can_afford_to_bail_out_mercatorum_subject = { RESOURCE = consumer_goods } }
					situation_alloys_deficit = { can_afford_to_bail_out_mercatorum_subject = { RESOURCE = alloys } }
					situation_volatile_motes_deficit = { can_afford_to_bail_out_mercatorum_subject = { RESOURCE = volatile_motes } }
					situation_exotic_gases_deficit = { can_afford_to_bail_out_mercatorum_subject = { RESOURCE = exotic_gases } }
					situation_rare_crystals_deficit = { can_afford_to_bail_out_mercatorum_subject = { RESOURCE = rare_crystals } }
					default = { can_afford_to_bail_out_mercatorum_subject = { RESOURCE = energy } }
				}
			}
		}
		from.owner = {
			add_opinion_modifier = {
				who = root
				modifier = opinion_specialist_mercatorum_overlord_deficit_bailout
			}
		}
		from = {
			switch = {
				trigger = is_situation_type
				situation_energy_deficit = { bail_out_mercatorum_subject = { RESOURCE = energy } }
				situation_mineral_deficit = { bail_out_mercatorum_subject = { RESOURCE = minerals } }
				situation_food_deficit = { bail_out_mercatorum_subject = { RESOURCE = food } }
				situation_consumer_goods_deficit = { bail_out_mercatorum_subject = { RESOURCE = consumer_goods } }
				situation_alloys_deficit = { bail_out_mercatorum_subject = { RESOURCE = alloys } }
				situation_volatile_motes_deficit = { bail_out_mercatorum_subject = { RESOURCE = volatile_motes } }
				situation_exotic_gases_deficit = { bail_out_mercatorum_subject = { RESOURCE = exotic_gases } }
				situation_rare_crystals_deficit = { bail_out_mercatorum_subject = { RESOURCE = rare_crystals } }
			}
		}
		fromfromfrom = { add_loyalty = 5 }
		ai_chance = {
			base = 3
			modifier = {
				add = 1
				has_ethic = ethic_xenophile
			}
			modifier = {
				add = 2
				has_ethic = ethic_fanatic_xenophile
			}
			modifier = {
				add = 2
				OR = {
					is_capitalist = yes
					has_corporate_government = yes
				}
			}
			modifier = {
				add = 2
				has_valid_ai_personality = yes
				has_ai_personality_behaviour = subjugator
			}
			modifier = {
				add = 2
				has_valid_ai_personality = yes
				has_ai_personality_behaviour = multispecies
			}
			modifier = {
				factor = 2
				NOR = { # these built-in personalities don't care about loyalty (loyalty_acceptance < 1)
					has_ai_personality = ruthless_capitalists
					has_ai_personality = slaving_despots
					has_ai_personality = decadent_hierarchy
					has_ai_personality = xenophobic_isolationists
					has_ai_personality = fanatic_purifiers
					has_ai_personality = devouring_swarm
					has_ai_personality = migrating_flock
					has_ai_personality = exterminators
					has_ai_personality = became_the_crisis
					has_ai_personality = imperial_origin_overlord_ai
					has_ai_personality = decadent_capitalists
				}
				from.owner = { is_loyal_to = root }
			}
		}
	}
	option = {
		name = specialist_mercatorum.14.b
		from = {
			hidden_effect = { set_situation_flag = deficit_situation_imminent_default }
			owner = {
				add_opinion_modifier = {
					who = root
					modifier = opinion_specialist_mercatorum_overlord_deficit_bailout_refuse
				}
			}
		}
		fromfromfrom = { add_loyalty = -5 }
		custom_tooltip = specialist_mercatorum.14.b.tooltip
		tooltip = {
			add_modifier = {
				modifier = specialist_mercatorum_defaulted_overlord
				years = 10
			}
			from.owner = {
				add_opinion_modifier = {
					who = root
					modifier = opinion_specialist_mercatorum_overlord_allowed_default
				}
			}
			fromfromfrom = { add_loyalty = -20 }
		}
		ai_chance = {
			base = 1
			modifier = {
				add = 1
				has_ethic = ethic_xenophobe
			}
			modifier = {
				add = 2
				has_ethic = ethic_fanatic_xenophobe
			}
			modifier = {
				add = 2
				has_valid_ai_personality = yes
				has_ai_personality_behaviour = slaver
			}
			modifier = {
				factor = 2
				is_homicidal = yes
				from.owner = { is_disloyal_to = root }
			}
		}
	}
}

# triggered explicitly by country_defaulted_effect
# root = country, overlord
# from = situation, deficit
country_event = {
	id = specialist_mercatorum.15
	title = specialist_mercatorum.15.title
	desc = specialist_mercatorum.15.desc
	picture = GFX_evt_deficit
	show_sound = event_life_support_fail
	is_triggered_only = yes
	trigger = {
		is_ai = no
		exists = from
		from = {
			OR = {
				is_situation_type = situation_energy_deficit
				is_situation_type = situation_mineral_deficit
				is_situation_type = situation_food_deficit
				is_situation_type = situation_consumer_goods_deficit
				is_situation_type = situation_alloys_deficit
				is_situation_type = situation_volatile_motes_deficit
				is_situation_type = situation_exotic_gases_deficit
				is_situation_type = situation_rare_crystals_deficit
			}
		}
	}
	immediate = { from.owner = { save_event_target_as = mercatorum_subject } }
	option = {
		name = UNFORTUNATE
		tooltip = {
			add_modifier = {
				modifier = specialist_mercatorum_defaulted_overlord
				years = 10
			}
			event_target:mercatorum_subject = {
				add_opinion_modifier = {
					who = root
					modifier = opinion_specialist_mercatorum_overlord_allowed_default
				}
			}
			random_agreement = {
				limit = {
					owner = { is_country = root }
					target = { is_country = event_target:mercatorum_subject }
					has_active_specialization = specialist_mercatorum
				}
				add_loyalty = -20
			}
		}
	}
}

# triggered explicitly by on_monthly from the situation specialist_mercatorum_dividends
# shim event in order to delay a day for monthly progress and calculations to completed
situation_event = {
	id = specialist_mercatorum.16
	is_triggered_only = yes
	hide_window = yes
	trigger = {
		is_situation_type = specialist_mercatorum_dividends
		exists = owner
		owner = { is_subject = yes }
	}
	immediate = {
		# delay a day for monthly calculations to be updated
		situation_event = {
			id = specialist_mercatorum.12
			days = 1
		}
	}
}

# triggered explicitly by the situation specialist_mercatorum_dividends
# root = country, subject (mercatorum)
country_event = {
	id = specialist_mercatorum.275
	hide_window = yes
	is_triggered_only = yes
	trigger = {
		is_subject = yes
		any_agreement = {
			owner = { is_country = root.overlord }
			target = { is_country = root }
			has_active_specialization = specialist_mercatorum
		}
	}
	immediate = {
		if = {
			limit = {
				NOR = {
					has_deficit = energy
					has_actual_deficit = { RESOURCE = energy }
				}
			}
			random_agreement = {
				limit = {
					owner = { is_country = root.overlord }
					target = { is_country = root }
					has_active_specialization = specialist_mercatorum
				}
				save_event_target_as = specialist_mercatorum_agreement
			}
			overlord = {
				random_list = {
					10 = {
						country_event = {
							id = specialist_mercatorum.2000
						}
						prev = {
							country_event = {
								id = specialist_mercatorum.2100
							}
						}
					}
					20 = {
						modifier = {
							factor = 0
							prev = {
								OR = {
									AND = {
										has_deficit = minerals
										has_actual_deficit = { RESOURCE = minerals }
									}
									AND = {
										has_deficit = food
										has_actual_deficit = { RESOURCE = food }
									}
								}
							}
						}
						country_event = {
							id = specialist_mercatorum.2005
						}
						prev = {
							country_event = {
								id = specialist_mercatorum.2105
							}
						}
					}
					15 = {
						modifier = {
							factor = 0
							prev = {
								OR = {
									AND = {
										has_deficit = consumer_goods
										has_actual_deficit = { RESOURCE = consumer_goods }
									}
									AND = {
										has_deficit = alloys
										has_actual_deficit = { RESOURCE = alloys }
									}
								}
							}
						}
						country_event = {
							id = specialist_mercatorum.2006
						}
						prev = {
							country_event = {
								id = specialist_mercatorum.2106
							}
						}
					}
					10 = {
						modifier = {
							factor = 0
							prev = {
								OR = {
									AND = {
										has_deficit = volatile_motes
										has_actual_deficit = { RESOURCE = volatile_motes }
									}
									AND = {
										has_deficit = exotic_gases
										has_actual_deficit = { RESOURCE = exotic_gases }
									}
									AND = {
										has_deficit = rare_crystals
										has_actual_deficit = { RESOURCE = rare_crystals }
									}
								}
							}
						}
						country_event = {
							id = specialist_mercatorum.2007
						}
						prev = {
							country_event = {
								id = specialist_mercatorum.2107
							}
						}
					}
					5 = {
						modifier = {
							factor = 0
							prev = {
								OR = {
									AND = {
										has_deficit = sr_living_metal
										has_actual_deficit = { RESOURCE = sr_living_metal }
									}
									AND = {
										has_deficit = sr_zro
										has_actual_deficit = { RESOURCE = sr_zro }
									}
									AND = {
										has_deficit = sr_dark_matter
										has_actual_deficit = { RESOURCE = sr_dark_matter }
									}
								}
							}
						}
						country_event = {
							id = specialist_mercatorum.2008
						}
						prev = {
							country_event = {
								id = specialist_mercatorum.2108
							}
						}
					}
					35 = {
						country_event = {
							id = specialist_mercatorum.2010
						}
						prev = {
							country_event = {
								id = specialist_mercatorum.2110
							}
						}
					}
					5 = {
						country_event = {
							id = specialist_mercatorum.2020
						}
						prev = {
							country_event = {
								id = specialist_mercatorum.2120
							}
						}
					}
				}
			}
		}
	}
	after = {
		start_situation = {
			type = specialist_mercatorum_dividends
			target = this
		}
	}
}

# triggered by on_leader_spawned
# root = country
# from = leader
country_event = {
	id = specialist_mercatorum.400
	hide_window = yes
	is_triggered_only = yes
	trigger = {
		is_specialist_subject_tier = {
			TYPE = mercatorum
			TIER = 2
		}
		exists = from
		from = { leader_class = governor }
	}
	immediate = {
		from = {
			add_specialist_trait_to_leader_in_pool = {
				TYPE = mercatorum
				CLASS = governor
			}
		}
	}
}

# research reward, triggered explicitly by specialist_mercatorum.275
# root = country, overlord
# from = country, subject (mercatorum)
# event_target:specialist_mercatorum_agreement = agreement, the mercatorum agreement between the overlord and subject
country_event = {
	id = specialist_mercatorum.2000
	title = specialist_mercatorum.2000.title
	desc = specialist_mercatorum.2000.desc
	picture = {
		picture = GFX_evt_physics_research
		trigger = {
			check_variable = {
				which = sm_2000_random
				value = 0
			}
		}
	}
	picture = {
		picture = GFX_evt_society_research
		trigger = {
			check_variable = {
				which = sm_2000_random
				value = 1
			}
		}
	}
	picture = {
		picture = GFX_evt_engineering_research
		trigger = {
			check_variable = {
				which = sm_2000_random
				value = 2
			}
		}
	}
	show_sound = event_laboratory_sound
	is_triggered_only = yes
	trigger = { exists = event_target:specialist_mercatorum_agreement }
	immediate = {
		set_dividend_percentage = yes
		set_variable_to_random_value = {
			which = sm_2000_random
			rounded = yes
		}
		modulo_variable = {
			which = sm_2000_random
			value = 3
		}
	}
	after = {
		hidden_effect = { 
			if = {
				limit = { is_variable_set = dividend_percentage }
				clear_variable = dividend_percentage
			}
			clear_variable = sm_2000_random
		}
	}
	option = {
		name = EXCELLENT
		trigger = {
			hidden_trigger = {
				check_variable = {
					which = dividend_percentage
					value > 0
				}
			}
		}
		add_resource = {
			energy = 1
			mult = value:dividends_from_subject_monthly_income|RESOURCE|energy|
		}
		add_resource = {
			physics_research = 1
			mult = value:dividends_from_subject_monthly_income|RESOURCE|physics_research|
		}
		add_resource = {
			society_research = 1
			mult = value:dividends_from_subject_monthly_income|RESOURCE|society_research|
		}
		add_resource = {
			engineering_research = 1
			mult = value:dividends_from_subject_monthly_income|RESOURCE|engineering_research|
		}
	}
	option = {
		name = UNFORTUNATE
		custom_tooltip = specialist_mercatorum.2000.b.none
		trigger = {
			hidden_trigger = {
				check_variable = {
					which = dividend_percentage
					value <= 0
				}
			}
		}
	}
}

# basic resources reward, triggered explicitly by specialist_mercatorum.275
# root = country, overlord
# from = country, subject (mercatorum)
# event_target:specialist_mercatorum_agreement = agreement, the mercatorum agreement between the overlord and subject
country_event = {
	id = specialist_mercatorum.2005
	title = specialist_mercatorum.2000.title
	desc = specialist_mercatorum.2005.desc
	picture = {
		picture = GFX_evt_mining_operations
		trigger = {
			check_variable = {
				which = sm_2005_random
				value = 0
			}
		}
	}
	picture = {
		picture = GFX_evt_mining_station
		trigger = {
			check_variable = {
				which = sm_2005_random
				value = 1
			}
		}
	}
	show_sound = event_drilling
	is_triggered_only = yes
	trigger = { exists = event_target:specialist_mercatorum_agreement }
	weight_multiplier = {
		factor = 1
		modifier = {
			factor = 2
			event_target:specialist_mercatorum_agreement = { specialist_tier = 1 }
		}
		modifier = {
			factor = 0.5
			event_target:specialist_mercatorum_agreement = { specialist_tier = 3 }
		}
	}
	immediate = {
		set_dividend_percentage = yes
		set_variable_to_random_value = {
			which = sm_2005_random
			rounded = yes
		}
		modulo_variable = {
			which = sm_2005_random
			value = 2
		}
	}
	after = {
		hidden_effect = { 
			if = {
				limit = { is_variable_set = dividend_percentage }
				clear_variable = dividend_percentage
			}
			clear_variable = sm_2005_random
		}
	}
	option = {
		name = EXCELLENT
		trigger = {
			hidden_trigger = {
				check_variable = {
					which = dividend_percentage
					value > 0
				}
			}
		}
		add_resource = {
			energy = 1
			mult = value:dividends_from_subject_monthly_income|RESOURCE|energy|
		}
		add_resource = {
			minerals = 1
			mult = value:dividends_from_subject_monthly_income|RESOURCE|minerals|
		}
		add_resource = {
			food = 1
			mult = value:dividends_from_subject_monthly_income|RESOURCE|food|
		}
	}
	option = {
		name = UNFORTUNATE
		custom_tooltip = specialist_mercatorum.2000.b.none
		trigger = {
			hidden_trigger = {
				check_variable = {
					which = dividend_percentage
					value <= 0
				}
			}
		}
	}
}

# advanced resources reward, triggered explicitly by specialist_mercatorum.275
# root = country, overlord
# from = country, subject (mercatorum)
# event_target:specialist_mercatorum_agreement = agreement, the mercatorum agreement between the overlord and subject
country_event = {
	id = specialist_mercatorum.2006
	title = specialist_mercatorum.2000.title
	desc = specialist_mercatorum.2006.desc
	picture = GFX_evt_ship_offloading_cargo
	show_sound = event_mystic_reveal_light
	is_triggered_only = yes
	trigger = { exists = event_target:specialist_mercatorum_agreement }
	weight_multiplier = {
		factor = 1
		modifier = {
			factor = 0.5
			event_target:specialist_mercatorum_agreement = { specialist_tier = 1 }
		}
	}
	immediate = { set_dividend_percentage = yes }
	after = {
		if = {
			limit = { is_variable_set = dividend_percentage }
			hidden_effect = { clear_variable = dividend_percentage }
		}
	}
	option = {
		name = EXCELLENT
		trigger = {
			hidden_trigger = {
				check_variable = {
					which = dividend_percentage
					value > 0
				}
			}
		}
		add_resource = {
			energy = 1
			mult = value:dividends_from_subject_monthly_income|RESOURCE|energy|
		}
		add_resource = {
			consumer_goods = 1
			mult = value:dividends_from_subject_monthly_income|RESOURCE|consumer_goods|
		}
		add_resource = {
			alloys = 1
			mult = value:dividends_from_subject_monthly_income|RESOURCE|alloys|
		}
	}
	option = {
		name = UNFORTUNATE
		custom_tooltip = specialist_mercatorum.2000.b.none
		trigger = {
			hidden_trigger = {
				check_variable = {
					which = dividend_percentage
					value <= 0
				}
			}
		}
	}
}

# strategic resources reward, triggered explicitly by specialist_mercatorum.275
# root = country, overlord
# from = country, subject (mercatorum)
# event_target:specialist_mercatorum_agreement = agreement, the mercatorum agreement between the overlord and subject
country_event = {
	id = specialist_mercatorum.2007
	title = specialist_mercatorum.2000.title
	desc = specialist_mercatorum.2007.desc
	picture = GFX_evt_strategic_resources
	show_sound = event_construction
	is_triggered_only = yes
	trigger = { exists = event_target:specialist_mercatorum_agreement }
	weight_multiplier = {
		factor = 1
		modifier = {
			factor = 1.5
			event_target:specialist_mercatorum_agreement = { specialist_tier >= 2 }
		}
		modifier = {
			factor = 1.5
			event_target:specialist_mercatorum_agreement = { specialist_tier >= 3 }
		}
	}
	immediate = { set_dividend_percentage = yes }
	after = {
		if = {
			limit = { is_variable_set = dividend_percentage }
			hidden_effect = { clear_variable = dividend_percentage }
		}
	}
	option = {
		name = EXCELLENT
		trigger = {
			hidden_trigger = {
				check_variable = {
					which = dividend_percentage
					value > 0
				}
			}
		}
		add_resource = {
			energy = 1
			mult = value:dividends_from_subject_monthly_income|RESOURCE|energy|
		}
		add_resource = {
			volatile_motes = 1
			mult = value:dividends_from_subject_monthly_income|RESOURCE|volatile_motes|
		}
		add_resource = {
			exotic_gases = 1
			mult = value:dividends_from_subject_monthly_income|RESOURCE|exotic_gases|
		}
		add_resource = {
			rare_crystals = 1
			mult = value:dividends_from_subject_monthly_income|RESOURCE|rare_crystals|
		}
	}
	option = {
		name = UNFORTUNATE
		custom_tooltip = specialist_mercatorum.2000.b.none
		trigger = {
			hidden_trigger = {
				check_variable = {
					which = dividend_percentage
					value <= 0
				}
			}
		}
	}
}

# rare resources reward, triggered explicitly by specialist_mercatorum.275
# root = country, overlord
# from = country, subject (mercatorum)
# event_target:specialist_mercatorum_agreement = agreement, the mercatorum agreement between the overlord and subject
country_event = {
	id = specialist_mercatorum.2008
	title = specialist_mercatorum.2000.title
	desc = specialist_mercatorum.2008.desc
	picture = GFX_evt_board_meeting
	show_sound = event_conversation
	is_triggered_only = yes
	trigger = { exists = event_target:specialist_mercatorum_agreement }
	weight_multiplier = {
		factor = 1
		modifier = {
			factor = 0
			event_target:specialist_mercatorum_agreement = { specialist_tier = 1 }
		}
		modifier = {
			factor = 0.5
			event_target:specialist_mercatorum_agreement = { specialist_tier = 2 }
		}
	}
	immediate = { set_dividend_percentage = yes }
	after = {
		if = {
			limit = { is_variable_set = dividend_percentage }
			hidden_effect = { clear_variable = dividend_percentage }
		}
	}
	option = {
		name = EXCELLENT
		trigger = {
			hidden_trigger = {
				check_variable = {
					which = dividend_percentage
					value > 0
				}
			}
		}
		add_resource = {
			energy = 1
			mult = value:dividends_from_subject_monthly_income|RESOURCE|energy|
		}
		add_resource = {
			sr_living_metal = 1
			mult = value:dividends_from_subject_monthly_income|RESOURCE|sr_living_metal|BONUS_TIERS|-1|
		}
		add_resource = {
			sr_zro = 1
			mult = value:dividends_from_subject_monthly_income|RESOURCE|sr_zro|BONUS_TIERS|-1|
		}
		add_resource = {
			sr_dark_matter = 1
			mult = value:dividends_from_subject_monthly_income|RESOURCE|sr_dark_matter|BONUS_TIERS|-1|
		}
	}
	option = {
		name = UNFORTUNATE
		custom_tooltip = specialist_mercatorum.2000.b.none
		trigger = {
			hidden_trigger = {
				check_variable = {
					which = dividend_percentage
					value <= 0
				}
			}
		}
	}
}

# cash reward, triggered explicitly by specialist_mercatorum.275
# root = country, overlord
# from = country, subject (mercatorum)
# event_target:specialist_mercatorum_agreement = agreement, the mercatorum agreement between the overlord and subject
country_event = {
	id = specialist_mercatorum.2010
	title = specialist_mercatorum.2000.title
	desc = specialist_mercatorum.2010.desc
	picture = GFX_evt_tradedeal
	show_sound = event_finding_loot
	is_triggered_only = yes
	trigger = { exists = event_target:specialist_mercatorum_agreement }
	immediate = { set_dividend_percentage = yes }
	after = {
		if = {
			limit = { is_variable_set = dividend_percentage }
			hidden_effect = { clear_variable = dividend_percentage }
		}
	}
	option = {
		name = EXCELLENT
		trigger = {
			hidden_trigger = {
				check_variable = {
					which = dividend_percentage
					value > 0
				}
			}
		}
		add_resource = {
			energy = 1
			mult = value:dividends_from_subject_monthly_income|RESOURCE|energy|BONUS_TIERS|2|
		}
	}
	option = {
		name = UNFORTUNATE
		custom_tooltip = specialist_mercatorum.2000.b.none
		trigger = {
			hidden_trigger = {
				check_variable = {
					which = dividend_percentage
					value <= 0
				}
			}
		}
	}
}

# jackpot reward, triggered explicitly by specialist_mercatorum.275
# root = country, overlord
# from = country, subject (mercatorum)
# event_target:specialist_mercatorum_agreement = agreement, the mercatorum agreement between the overlord and subject
country_event = {
	id = specialist_mercatorum.2020
	title = specialist_mercatorum.2000.title
	desc = specialist_mercatorum.2020.desc
	picture = GFX_evt_financial_instruments
	show_sound = event_galactic_market
	is_triggered_only = yes
	trigger = { exists = event_target:specialist_mercatorum_agreement }
	immediate = { set_dividend_percentage = yes }
	after = {
		if = {
			limit = { is_variable_set = dividend_percentage }
			hidden_effect = { clear_variable = dividend_percentage }
		}
	}
	option = {
		name = EXCELLENT
		trigger = {
			hidden_trigger = {
				check_variable = {
					which = dividend_percentage
					value > 0
				}
			}
		}
		add_resource = {
			energy = 1
			mult = value:dividends_from_subject_monthly_income|RESOURCE|energy|BONUS_TIERS|2|
		}
		add_resource = {
			consumer_goods = 1
			mult = value:dividends_from_subject_monthly_income|RESOURCE|consumer_goods|
		}
		locked_random_list = {
			1 = {
				add_resource = {
					minerals = 1
					mult = value:dividends_from_subject_monthly_income|RESOURCE|minerals|
				}
			}
			1 = {
				add_resource = {
					food = 1
					mult = value:dividends_from_subject_monthly_income|RESOURCE|food|
				}
			}
			1 = {
				add_resource = {
					alloys = 1
					mult = value:dividends_from_subject_monthly_income|RESOURCE|alloys|
				}
			}
		}
		if = {
			limit = { event_target:specialist_mercatorum_agreement = { specialist_tier > 1 } }
			locked_random_list = {
				1 = {
					add_resource = {
						volatile_motes = 1
						mult = value:dividends_from_subject_monthly_income|RESOURCE|volatile_motes|BONUS_TIERS|1|
					}
				}
				1 = {
					add_resource = {
						exotic_gases = 1
						mult = value:dividends_from_subject_monthly_income|RESOURCE|exotic_gases|BONUS_TIERS|1|
					}
				}
				1 = {
					add_resource = {
						rare_crystals = 1
						mult = value:dividends_from_subject_monthly_income|RESOURCE|rare_crystals|BONUS_TIERS|1|
					}
				}
			}
		}
		if = {
			limit = { event_target:specialist_mercatorum_agreement = { specialist_tier > 2 } }
			locked_random_list = {
				1 = {
					add_resource = {
						sr_living_metal = 1
						mult = value:dividends_from_subject_monthly_income|RESOURCE|sr_living_metal|BONUS_TIERS|-2|
					}
				}
				1 = {
					add_resource = {
						sr_zro = 1
						mult = value:dividends_from_subject_monthly_income|RESOURCE|sr_zro|BONUS_TIERS|-2|
					}
				}
				1 = {
					add_resource = {
						sr_dark_matter = 1
						mult = value:dividends_from_subject_monthly_income|RESOURCE|sr_dark_matter|BONUS_TIERS|-2|
					}
				}
			}
		}
		locked_random_list = {
			1 = {
				add_resource = {
					physics_research = 1
					mult = value:dividends_from_subject_monthly_income|RESOURCE|physics_research|
				}
			}
			1 = {
				add_resource = {
					society_research = 1
					mult = value:dividends_from_subject_monthly_income|RESOURCE|society_research|
				}
			}
			1 = {
				add_resource = {
					engineering_research = 1
					mult = value:dividends_from_subject_monthly_income|RESOURCE|engineering_research|
				}
			}
		}
	}
	option = {
		name = UNFORTUNATE
		custom_tooltip = specialist_mercatorum.2000.b.none
		trigger = {
			hidden_trigger = {
				check_variable = {
					which = dividend_percentage
					value <= 0
				}
			}
		}
	}
}

# research reward, triggered explicitly by specialist_mercatorum.275
# root = country, subject (mercatorum)
# event_target:specialist_mercatorum_agreement = agreement, the mercatorum agreement between the overlord and subject
country_event = {
	id = specialist_mercatorum.2100
	base = specialist_mercatorum.2000
	desc_clear = yes
	title = specialist_mercatorum.2100.title
	desc = specialist_mercatorum.2100.desc
}

# research reward, triggered explicitly by specialist_mercatorum.275
# root = country, subject (mercatorum)
# event_target:specialist_mercatorum_agreement = agreement, the mercatorum agreement between the overlord and subject
country_event = {
	id = specialist_mercatorum.2105
	base = specialist_mercatorum.2005
	desc_clear = yes
	title = specialist_mercatorum.2100.title
	desc = specialist_mercatorum.2105.desc
}

# research reward, triggered explicitly by specialist_mercatorum.275
# root = country, subject (mercatorum)
# event_target:specialist_mercatorum_agreement = agreement, the mercatorum agreement between the overlord and subject
country_event = {
	id = specialist_mercatorum.2106
	base = specialist_mercatorum.2006
	desc_clear = yes
	title = specialist_mercatorum.2100.title
	desc = specialist_mercatorum.2106.desc
}

# research reward, triggered explicitly by specialist_mercatorum.275
# root = country, subject (mercatorum)
# event_target:specialist_mercatorum_agreement = agreement, the mercatorum agreement between the overlord and subject
country_event = {
	id = specialist_mercatorum.2107
	base = specialist_mercatorum.2007
	desc_clear = yes
	title = specialist_mercatorum.2100.title
	desc = specialist_mercatorum.2107.desc
}

# research reward, triggered explicitly by specialist_mercatorum.275
# root = country, subject (mercatorum)
# event_target:specialist_mercatorum_agreement = agreement, the mercatorum agreement between the overlord and subject
country_event = {
	id = specialist_mercatorum.2108
	base = specialist_mercatorum.2008
	desc_clear = yes
	title = specialist_mercatorum.2100.title
	desc = specialist_mercatorum.2108.desc
}

# research reward, triggered explicitly by specialist_mercatorum.275
# root = country, subject (mercatorum)
# event_target:specialist_mercatorum_agreement = agreement, the mercatorum agreement between the overlord and subject
country_event = {
	id = specialist_mercatorum.2110
	base = specialist_mercatorum.2010
	desc_clear = yes
	title = specialist_mercatorum.2100.title
	desc = specialist_mercatorum.2110.desc
}

# research reward, triggered explicitly by specialist_mercatorum.275
# root = country, subject (mercatorum)
# event_target:specialist_mercatorum_agreement = agreement, the mercatorum agreement between the overlord and subject
country_event = {
	id = specialist_mercatorum.2120
	base = specialist_mercatorum.2020
	desc_clear = yes
	title = specialist_mercatorum.2100.title
	desc = specialist_mercatorum.2120.desc
}

# explicitly fired by origin.5705
country_event = { # Learn more about Mercatora
	id = specialist_mercatorum.5709
	title = TRANSMISSION
	desc = specialist_mercatorum.5709.desc
	diplomatic = yes
	is_triggered_only = yes
	picture_event_data = {
		portrait = event_target:overlord_empire
		planet_background = event_target:overlord_empire
		graphical_culture = event_target:overlord_empire
		city_level = event_target:overlord_empire
		room = event_target:overlord_empire.ruler
	}
	option = { # choose mercatorum
		name = specialist_mercatorum.5709.a
		allow = {
			custom_tooltip = {
				fail_text = origin.5705.g.specialist_mercatorum.tooltip.fail_text
				overlord = {
					NAND = {
						is_variable_set = num_specialist_mercatorum
						check_variable = {
							which = num_specialist_mercatorum
							value > 0
						}
					}
				}
			}
		}
		default_hide_option = yes
		origin_imperial_fiefdom_mercatorum_specialization_effect = yes
	}
	option = { # reconsider
		name = specialist_mercatorum.5709.b
		hidden_effect = {
			country_event = {
				id = origin.5705
			}
			set_country_flag = imperial_fiefdom_reconsider_response
		}
	}
}