# this = leader
add_mercatorum_leader_trait = {
	optimize_memory
	random_list = {
		1 = { add_trait = leader_trait_mercatorum_trader }
		1 = { add_trait = leader_trait_mercatorum_economist }
		1 = { add_trait = leader_trait_mercatorum_industrialist }
	}
}

# this = leader
remove_mercatorum_leader_trait = {
	optimize_memory
	if = {
		limit = { has_trait = leader_trait_mercatorum_trader }
		remove_trait = leader_trait_mercatorum_trader
	}
	if = {
		limit = { has_trait = leader_trait_mercatorum_economist }
		remove_trait = leader_trait_mercatorum_economist
	}
	if = {
		limit = { has_trait = leader_trait_mercatorum_industrialist }
		remove_trait = leader_trait_mercatorum_industrialist
	}
}

# this = country
# $CIVIC$ = name of the civic to check for and, if present, add a country flag of the same name
set_civic_flag_if_present = {
	optimize_memory
	if = {
		limit = { has_civic = $CIVIC$ }
		set_country_flag = $CIVIC$
	}
}

# this = country
# $FLAG$ = the flag that controls whether the specified civic is added
# $CIVIC$ = the civic to add if the given country flag is present
# variable num_civics_to_add = the civic will only be added if this variable is > 0; decrememnted if the civic is added
add_civic_if_flag_present = {
	optimize_memory
	if = {
		limit = {
			check_variable = {
				which = num_civics_to_add
				value > 0
			}
			has_country_flag = $FLAG$
		}
		force_add_civic = $CIVIC$
		subtract_variable = {
			which = num_civics_to_add
			value = 1
		}
	}
}

# this = country
# $CIVIC$ = the civic to add if not already present
# variable num_civics_to_add = the civic will only be added if this variable is > 0; decrememnted if the civic is added
add_civic_if_not_present = {
	optimize_memory
	if = {
		limit = {
			NOT = { has_civic = $CIVIC$ }
			check_variable = {
				which = num_civics_to_add
				value > 0
			}
		}
		force_add_civic = $CIVIC$
		subtract_variable = {
			which = num_civics_to_add
			value = 1
		}
	}
}

# this = country, mercatorum subject
try_convert_to_mercatorum_megacorp = {
	optimize_memory
	if = {
		limit = {
			OR = {
				is_megacorp = no
				is_criminal_syndicate = yes
			}
		}
		set_variable = {
			which = num_civics_to_add
			value = 1 # not 2, because the subject is always assigned civic_free_traders
		}
		if = {
			limit = { has_technology = tech_galactic_administration }
			change_variable = {
				which = num_civics_to_add
				value = 1
			}
		}
		# flag for civics that have a (near-)direct corporate equivalent
		set_civic_flag_if_present = { CIVIC = civic_crafters }
		set_civic_flag_if_present = { CIVIC = civic_anglers }
		set_civic_flag_if_present = { CIVIC = civic_pleasure_seekers }
		set_civic_flag_if_present = { CIVIC = civic_slaver_guilds }
		set_civic_flag_if_present = { CIVIC = civic_death_cult }
		set_civic_flag_if_present = { CIVIC = civic_relentless_industrialists }
		set_civic_flag_if_present = { CIVIC = civic_catalytic_processing }
		set_civic_flag_if_present = { CIVIC = civic_scavengers }
		set_civic_flag_if_present = { CIVIC = civic_toxic_baths }
		set_civic_flag_if_present = { CIVIC = civic_reanimated_armies }
		set_civic_flag_if_present = { CIVIC = civic_cutthroat_politics }
		set_civic_flag_if_present = { CIVIC = civic_diplomatic_corps }
		set_civic_flag_if_present = { CIVIC = civic_idealistic_foundation }
		set_civic_flag_if_present = { CIVIC = civic_beacon_of_liberty }
		set_civic_flag_if_present = { CIVIC = civic_citizen_service }
		set_civic_flag_if_present = { CIVIC = civic_warrior_culture }
		set_civic_flag_if_present = { CIVIC = civic_exalted_priesthood }
		set_civic_flag_if_present = { CIVIC = civic_ascensionists }
		set_civic_flag_if_present = { CIVIC = civic_feudal_realm }
		set_civic_flag_if_present = { CIVIC = civic_criminal_heritage }
		# shift ethics as required for a megacorp - not fanatic authoritarian or fanatic egalitarian
		if = {
			limit = { has_ethic = ethic_fanatic_authoritarian }
			ordered_pop_faction = {
				limit = { NOT = { is_pop_faction_type = totalitarian } }
				order_by = trigger:num_pops
				position = 0
				switch = {
					trigger = is_pop_faction_type
					prosperity = { prev = { shift_ethic = ethic_pacifist } }
					imperialist = { prev = { shift_ethic = ethic_militarist } }
					isolationist = { prev = { shift_ethic = ethic_xenophobe } }
					supremacist = { prev = { shift_ethic = ethic_xenophobe } }
					technologist = { prev = { shift_ethic = ethic_materialist } }
					traditionalist = { prev = { shift_ethic = ethic_spiritualist } }
					xenoist = { prev = { shift_ethic = ethic_xenophile } }
					default = { prev = { shift_ethic = ethic_xenophile } }
				}
			}
		}
		else_if = {
			limit = { has_ethic = ethic_fanatic_egalitarian }
			ordered_pop_faction = {
				limit = {
					NOR = {
						is_pop_faction_type = progressive
						is_pop_faction_type = manifesti
					}
				}
				order_by = trigger:num_pops
				position = 0
				switch = {
					trigger = is_pop_faction_type
					prosperity = { prev = { shift_ethic = ethic_pacifist } }
					imperialist = { prev = { shift_ethic = ethic_militarist } }
					isolationist = { prev = { shift_ethic = ethic_xenophobe } }
					supremacist = { prev = { shift_ethic = ethic_xenophobe } }
					technologist = { prev = { shift_ethic = ethic_materialist } }
					traditionalist = { prev = { shift_ethic = ethic_spiritualist } }
					xenoist = { prev = { shift_ethic = ethic_xenophile } }
					default = { prev = { shift_ethic = ethic_xenophile } }
				}
			}
		}
		change_government = {
			authority = auth_corporate
			civics = { civic = civic_free_traders }
			cooldown = yes
			remove_invalid_civics = yes
		}
		# add equivalent civics
		add_civic_if_flag_present = {
			FLAG = civic_crafters
			CIVIC = civic_corporate_crafters
		}
		add_civic_if_flag_present = {
			FLAG = civic_anglers
			CIVIC = civic_corporate_anglers
		}
		add_civic_if_flag_present = {
			FLAG = civic_pleasure_seekers
			CIVIC = civic_corporate_hedonism
		}
		add_civic_if_flag_present = {
			FLAG = civic_slaver_guilds
			CIVIC = civic_indentured_assets
		}
		add_civic_if_flag_present = {
			FLAG = civic_death_cult
			CIVIC = civic_death_cult_corporate
		}
		add_civic_if_flag_present = {
			FLAG = civic_relentless_industrialists
			CIVIC = civic_corporate_relentless_industrialists
		}
		add_civic_if_flag_present = {
			FLAG = civic_catalytic_processing
			CIVIC = civic_corporate_catalytic_processing
		}
		add_civic_if_flag_present = {
			FLAG = civic_scavengers
			CIVIC = civic_corporate_scavengers
		}
		add_civic_if_flag_present = {
			FLAG = civic_toxic_baths
			CIVIC = civic_corporate_toxic_baths
		}
		add_civic_if_flag_present = {
			FLAG = civic_reanimated_armies
			CIVIC = civic_permanent_employment
		}
		add_civic_if_flag_present = {
			FLAG = civic_cutthroat_politics
			CIVIC = civic_ruthless_competition
		}
		add_civic_if_flag_present = {
			FLAG = civic_diplomatic_corps
			CIVIC = civic_public_relations_specialists
		}
		add_civic_if_flag_present = {
			FLAG = civic_idealistic_foundation
			CIVIC = civic_media_conglomerate
		}
		add_civic_if_flag_present = {
			FLAG = civic_beacon_of_liberty
			CIVIC = civic_brand_loyalty
		}
		add_civic_if_flag_present = {
			FLAG = civic_citizen_service
			CIVIC = civic_naval_contractors
		}
		add_civic_if_flag_present = {
			FLAG = civic_warrior_culture
			CIVIC = civic_private_military_companies
		}
		add_civic_if_flag_present = {
			FLAG = civic_exalted_priesthood
			CIVIC = civic_gospel_of_the_masses
		}
		add_civic_if_flag_present = {
			FLAG = civic_ascensionists
			CIVIC = civic_corporate_ascensionists
		}
		add_civic_if_flag_present = {
			FLAG = civic_feudal_realm
			CIVIC = civic_franchising
		}
		if = {
			limit = { has_country_flag = civic_criminal_heritage }
			every_galaxy_planet = {
				limit = {
					is_colony = yes
					has_branch_office = yes
					branch_office_owner = { is_country = prevprev }
				}
				try_convert_branch_office_to_normal = yes
			}
			remove_country_flag = civic_criminal_heritage
		}
		# cleanup all possible flags from above
		remove_country_flag = civic_crafters
		remove_country_flag = civic_anglers
		remove_country_flag = civic_pleasure_seekers
		remove_country_flag = civic_slaver_guilds
		remove_country_flag = civic_death_cult
		remove_country_flag = civic_relentless_industrialists
		remove_country_flag = civic_catalytic_processing
		remove_country_flag = civic_scavengers
		remove_country_flag = civic_toxic_baths
		remove_country_flag = civic_reanimated_armies
		remove_country_flag = civic_cutthroat_politics
		remove_country_flag = civic_diplomatic_corps
		remove_country_flag = civic_idealistic_foundation
		remove_country_flag = civic_beacon_of_liberty
		remove_country_flag = civic_citizen_service
		remove_country_flag = civic_warrior_culture
		remove_country_flag = civic_exalted_priesthood
		remove_country_flag = civic_ascensionists
		remove_country_flag = civic_feudal_realm
		# backup civics in case points remain unspent - no more than 2 can ever be added, so a minimum of two fallbacks are needed
		# (repeats are ok because they would have transferred above if the non-corporate "equivalent" was present)
		if = {
			limit = { has_humanoids = yes }
			add_civic_if_not_present = { CIVIC = civic_corporate_crafters }
		}
		add_civic_if_not_present = { CIVIC = civic_public_relations_specialists }
		add_civic_if_not_present = { CIVIC = civic_trading_posts }
		clear_variable = num_civics_to_add
	}
}

# set a varible with the owner's $RESOURCE$ deficit monthly income shortfall - but only if it hasn't been set, or this month is worse (lower) than the saved amount
# this = situation
# $RESOURCE$ = the resource for which to export the monthly deficit
set_owner_monthly_shortfall = {
	optimize_memory
	owner = {
		if = {
			limit = {
				resource_income_compare = {
					resource = $RESOURCE$
					value < 0
				}
			}
			export_resource_income_to_variable = {
				resource = $RESOURCE$
				variable = deficit_amount
			}
			prev = { 
				if = {
					limit = {
						OR = {
							NOT = { is_variable_set = deficit_amount }
							check_variable = {
								which = deficit_amount
								value < prev.deficit_amount
							}
						}
					}
					set_variable = {
						which = deficit_amount
						value = prev.deficit_amount
					}
				}
			}
		}
	}
}

# remove the $RESOURCE$ bailout from the overlord and add it to the subject
# this = situation
# $RESOURCE$ = the resource for which the subject is being bailed out
bail_out_mercatorum_subject = {
	optimize_memory
	log = "\\[Owner.Overlord.GetRealName] bailed out its mercatorum subject \\[Owner.GetRealName]'s \\[This.GetName]"
	# overlord explicitly not nested so it looks nice in tooltips
	owner.overlord = {
		add_resource = {
			$RESOURCE$ = 1
			multiplier = prev.value:mercatorum_specialist_deficit_bailout_amount
		}
	}
	owner = {
		add_resource = {
			$RESOURCE$ = -1 # subject receives the resources
			multiplier = prev.value:mercatorum_specialist_deficit_bailout_amount
		}
	}
	abort_situation = this
}

# calculates the actual percentage of dividends the country receives based on agreement terms and also whether the overlord or subject
# this = country, overlord or subject
# event_target:specialist_mercatorum_agreement = agreement, specialist_mercatorum
# output to variable dividend_percentage
set_dividend_percentage = {
	optimize_memory
	event_target:specialist_mercatorum_agreement = {
		if = {
			limit = {
				has_term_value = {
					term = specialist_mercatorum_commission
					value = specialist_mercatorum_commission_0
				}
			}
			set_variable = {
				which = mercatorum_commission_percentage
				value = 0
			}
		}
		else_if = {
			limit = {
				has_term_value = {
					term = specialist_mercatorum_commission
					value = specialist_mercatorum_commission_5
				}
			}
			set_variable = {
				which = mercatorum_commission_percentage
				value = 0.05
			}
		}
		else_if = {
			limit = {
				has_term_value = {
					term = specialist_mercatorum_commission
					value = specialist_mercatorum_commission_10
				}
			}
			set_variable = {
				which = mercatorum_commission_percentage
				value = 0.1
			}
		}
		else_if = {
			limit = {
				has_term_value = {
					term = specialist_mercatorum_commission
					value = specialist_mercatorum_commission_15
				}
			}
			set_variable = {
				which = mercatorum_commission_percentage
				value = 0.15
			}
		}
		else_if = {
			limit = {
				has_term_value = {
					term = specialist_mercatorum_commission
					value = specialist_mercatorum_commission_20
				}
			}
			set_variable = {
				which = mercatorum_commission_percentage
				value = 0.2
			}
		}
		else_if = {
			limit = {
				has_term_value = {
					term = specialist_mercatorum_commission
					value = specialist_mercatorum_commission_25
				}
			}
			set_variable = {
				which = mercatorum_commission_percentage
				value = 0.25
			}
		}
	}

	if = {
		limit = { is_overlord = yes }
		set_variable = {
			which = dividend_percentage
			value = 1
		}
		subtract_variable = {
			which = dividend_percentage
			value = event_target:specialist_mercatorum_agreement.mercatorum_commission_percentage
		}
	}
	else = {
		set_variable = {
			which = dividend_percentage
			value = event_target:specialist_mercatorum_agreement.mercatorum_commission_percentage
		}
	}

	event_target:specialist_mercatorum_agreement = { clear_variable = mercatorum_commission_percentage }
}

# this = planet
try_convert_branch_office_to_normal = {
	optimize_memory
	sm_swap_corporate_holdings = {
		FROM = building_wildcat_miners
		TO = building_private_mining_consortium
	}
	sm_swap_corporate_holdings = {
		FROM = building_bio_reprocessing_facilities
		TO = building_food_conglomerate
	}
	sm_swap_corporate_holdings = {
		FROM = building_underground_chemists
		TO = building_virtual_entertainment_studios
	}
	sm_swap_corporate_holdings = {
		FROM = building_wrecking_yards
		TO = building_private_shipyards
	}
	sm_swap_corporate_holdings = {
		FROM = building_pirate_haven
		TO = building_military_contractors
	}
	sm_swap_corporate_holdings = {
		FROM = building_syndicate_outreach_office
		TO = building_public_relations_office
	}
	sm_swap_corporate_holdings = {
		FROM = building_illicit_research_labs
		TO = building_private_research_initiative
	}
	sm_swap_corporate_holdings = {
		FROM = building_underground_clubs
		TO = building_amusement_megaplex
	}
	sm_swap_corporate_holdings = {
		FROM = building_smuggling_rings
		TO = building_commercial_forum
	}
	sm_swap_corporate_holdings = {
		FROM = building_disinformation_center
		TO = building_corporate_embassy
	}
	sm_swap_corporate_holdings = {
		FROM = building_subversive_shrine
		TO = building_temple_of_prosperity
	}
}

# this = planet
try_convert_branch_office_to_criminal = {
	optimize_memory
	sm_swap_corporate_holdings = {
		FROM = building_private_mining_consortium
		TO = building_wildcat_miners
	}
	sm_swap_corporate_holdings = {
		FROM = building_food_conglomerate
		TO = building_bio_reprocessing_facilities
	}
	sm_swap_corporate_holdings = {
		FROM = building_virtual_entertainment_studios
		TO = building_underground_chemists
	}
	sm_swap_corporate_holdings = {
		FROM = building_private_shipyards
		TO = building_wrecking_yards
	}
	sm_swap_corporate_holdings = {
		FROM = building_military_contractors
		TO = building_pirate_haven
	}
	sm_swap_corporate_holdings = {
		FROM = building_public_relations_office
		TO = building_syndicate_outreach_office
	}
	sm_swap_corporate_holdings = {
		FROM = building_private_research_initiative
		TO = building_illicit_research_labs
	}
	sm_swap_corporate_holdings = {
		FROM = building_amusement_megaplex
		TO = building_underground_clubs
	}
	sm_swap_corporate_holdings = {
		FROM = building_commercial_forum
		TO = building_smuggling_rings
	}
	sm_swap_corporate_holdings = {
		FROM = building_corporate_embassy
		TO = building_disinformation_center
	}
	sm_swap_corporate_holdings = {
		FROM = building_temple_of_prosperity
		TO = building_subversive_shrine
	}
}

# this = planet
# $FROM$ = building, source
# $TO$ = building, target
sm_swap_corporate_holdings = {
	optimize_memory
	while = {
		limit = {
			has_holding = {
				holding = $FROM$
				owner = branch_office_owner
			}
		}
		remove_holding = {
			holding = $FROM$
			owner = branch_office_owner
		}
		add_holding = {
			holding = $TO$
			owner = branch_office_owner
		}
	}
}